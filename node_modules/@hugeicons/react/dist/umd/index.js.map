{"version":3,"file":"index.js","sources":["../../src/HugeiconsIcon.tsx"],"sourcesContent":["import { createElement, forwardRef, ForwardRefExoticComponent, RefAttributes, SVGProps } from 'react';\n\nconst defaultAttributes = {\n  xmlns: 'http://www.w3.org/2000/svg',\n  width: 24,\n  height: 24,\n  viewBox: '0 0 24 24',\n  fill: 'none',\n};\n\nexport type IconSvgElement = readonly (readonly [string, { readonly [key: string]: string | number }])[];\n\nexport type SVGAttributes = Partial<SVGProps<SVGSVGElement>>;\ntype ComponentAttributes = RefAttributes<SVGSVGElement> & SVGAttributes;\n\nexport interface HugeiconsProps extends ComponentAttributes {\n  size?: string | number;\n  strokeWidth?: number;\n  absoluteStrokeWidth?: boolean;\n  altIcon?: IconSvgElement;\n  showAlt?: boolean;\n  icon?: IconSvgElement;\n}\n\nexport interface HugeiconsIconProps extends Omit<HugeiconsProps, 'ref' | 'altIcon'> {\n  icon: IconSvgElement;\n  altIcon?: IconSvgElement;\n}\n\nexport type HugeiconsIcon = ForwardRefExoticComponent<HugeiconsProps>;\n\nexport const HugeiconsIcon = forwardRef<SVGSVGElement, HugeiconsIconProps>(\n  (\n    {\n      color = 'currentColor',\n      size = 24,\n      strokeWidth,\n      absoluteStrokeWidth = false,\n      className = '',\n      altIcon,\n      showAlt = false,\n      icon,\n      ...rest\n    },\n    ref,\n  ) => {\n    const calculatedStrokeWidth = strokeWidth !== undefined\n      ? (absoluteStrokeWidth ? (Number(strokeWidth) * 24) / Number(size) : strokeWidth)\n      : undefined;\n\n    const strokeProps: { stroke?: string; strokeWidth?: number } = calculatedStrokeWidth !== undefined ? {\n      strokeWidth: calculatedStrokeWidth,\n      stroke: 'currentColor'\n    } : {};\n\n    const elementProps = {\n      ref,\n      ...defaultAttributes,\n      width: size,\n      height: size,\n      color,\n      className,\n      ...strokeProps,\n      ...rest,\n    };\n\n    const currentIcon = (showAlt && altIcon) ? altIcon : icon;\n\n    // Create SVG children without adding them as an icon prop\n    const svgChildren = currentIcon.map(([tag, attrs]) => {\n      return createElement(tag, { \n        ...attrs, \n        ...strokeProps,\n        key: attrs.key \n      });\n    });\n\n    return createElement(\n      'svg',\n      elementProps,\n      svgChildren\n    );\n  },\n);\n\nHugeiconsIcon.displayName = 'HugeiconsIcon';\n\nexport default HugeiconsIcon; "],"names":["defaultAttributes","xmlns","width","height","viewBox","fill","HugeiconsIcon","forwardRef","color","size","strokeWidth","absoluteStrokeWidth","className","altIcon","showAlt","icon","rest","ref","calculatedStrokeWidth","undefined","Number","strokeProps","stroke","elementProps","svgChildren","map","tag","attrs","createElement","key","displayName"],"mappings":"yRAEA,MAAMA,EAAoB,CACxBC,MAAO,6BACPC,MAAO,GACPC,OAAQ,GACRC,QAAS,YACTC,KAAM,QAwBKC,EAAgBC,EAAAA,YAC3B,EAEIC,QAAQ,eACRC,OAAO,GACPC,cACAC,uBAAsB,EACtBC,YAAY,GACZC,UACAC,WAAU,EACVC,UACGC,GAELC,KAEA,MAAMC,OAAwCC,IAAhBT,EACzBC,EAA6C,GAAtBS,OAAOV,GAAqBU,OAAOX,GAAQC,OACnES,EAEEE,OAAmFF,IAA1BD,EAAsC,CACnGR,YAAaQ,EACbI,OAAQ,gBACN,GAEEC,EAAe,CACnBN,SACGjB,EACHE,MAAOO,EACPN,OAAQM,EACRD,QACAI,eACGS,KACAL,GAMCQ,GAHeV,GAAWD,EAAWA,EAAUE,GAGrBU,KAAI,EAAEC,EAAKC,KAClCC,EAAAA,cAAcF,EAAK,IACrBC,KACAN,EACHQ,IAAKF,EAAME,QAIf,OAAOD,gBACL,MACAL,EACAC,EACD,IAILlB,EAAcwB,YAAc"}